
for incremental loading

each z,x,y needs its own loading work (background disk stuff, foreground image ui stuff followup)
each need to know which LoadedState it is in
 - unloaded
 - loading in progress
 - data (or nullness) is loaded

prioritizing loading the data that would be in the display view is done via throttling
there is a high priority list of requests that the UI has made to display, that will kickoff loading work
        JJJ it could kick them all off, but if the user changes the view in the meantime, it can't prioritize unless the high priority stuff is also throttled; probably dont worry about that now
there is a low-priority list of 'everything else' that will kick off, say, 30 more items at a time, but only when there is no outstanding background work

when the UI wants to redraw (if JJJ, then remove any queueud unstarted work items from high pri queue), it can ask each item for itself KKK, which will
 - unloaded -> send a hi-pri request to the throttle, return a dummy 'loading' image
 - loading -> return a dummy 'loading' image
 - loaded -> return the actual data

as background work emerges from the throttle, the throttle can batch up items to do on the UI thread and then like once every 0.3s or something run the current-ready batch
 - each item would update its UI-thread-local instance variables with data, and
 - KKK when the UI got back the dummy images, it should have also requested a coda to run once the image is ready, so run the coda too, which would e.g. draw the new data on 
        the canvas (if no viewport-change/redraw has happened in the meantime, maybe use a monotonic integer 'redraw-timestamp' to run the coda only if redraw-timestamp unchanged)

the throttle can also do low priority work, which is, at app load time, try to load everything
we'd queue up everything
we'd only run the low-pri queue when the high-pri queue is empty
we'd only run a small batch (say, 30) of items in the low-pri queue at a time
each item, when kicked off, must first check to see if it is already loading or has been loaded (maybe hi-pri got to it first), so we need some threadsafe way for LoadedState to be read 
    from UI thread and read/written on throttle thread, I guess? (throttle is probably a mailbox processor)



ACTUALLY

Charlie points out that a single MailboxProcessor running a priority queue means all the bg work only contends with that background thread, and locking is unlikely to slow stuff down much.
UI thread can fire and forget requests (item x priority) and MP can order the work and BG threads can schedule all the async reads and then queue up their UI codas, and a periodic rendevouz
with the UI thread can scrape N codas off that queue to run them and update the UI.




















two minimaps? nearby view and full zone view? abstract or screenshots?


maybe '55' would 'change center/zoom so that all this zone fits onscreen? (what if keyboard cursor still off?)

 - aside: consider separate floating window for 3x3 or 5x5 zoom around cursor (updates when kbdX/kbdY changes)
 - also how do I feature composited screenshots of a tile?

maybe make my own tiny abstract minimap projection window to overlay on HUD?
 - hm, what are odds I can take constant screenshots and guess auto-tracking
 - could just put human in loop, and show me green v red based on if it thinks cursor matches current location


crash when press '*'?

what if my icons could include single letter/number/character?
what if icons could be full rectangles of semi-transparent color?


get 'native' scale working again


feature window could use an icon legend, somewhere, somehow

for master key:
 - DONE need multiple 'auxiliary' screenshots on a screen (e.g. house interior) as well as main map thing
 - DONE need compositing (light bubbles) as well as choosing (e.g. after bushes cut), in addition to aux. stuff
 - DONE need zone names (for like 'dungeon 1')

general:
 - DONE would be good to redo layout so i can capture/project a useful map, though still not sure what is best
 - i rarely used zoom, and preferred seeing whole map and marker-abstractions, so maybe always just zoom to see all map + 2 tiles on each end?
 - (can always print to see full zoomable map in another image/photo tool; printing to game folder, all zones, by name, maybe in a date folder)
 - DONE my color icons were kinda insufficient as like red X and green X might overwrite each other... kinda want more uniques, or like each color has own left-right jitter so can see both
 - fast travel linkages (visually, click-y, ...)
   - DONE idea, in addition to e.g. (30,40) to go that that screen in this zone, also allow (zone02) or (zone02,30,40)
   - DONE and in feature, it should show those labeled with the coords and/or zone label
   - DONE and in app, should be clickable list to go there
DONE different UI:
 - cursor seperate from zoom/viewport
 - mousing moves cursor
   - mousing moves mouse cursor, which affects bottom view and edit focus; keyboard cursor stays put
   - on mouse leave, cursor jumps back to keyboard cursor
   - on click, keyboard cursor jumps to mouse position
   - on arrow, keyboard cursor moves, and mouse warps to new keyboard cursor position (if mouse within app)
      - '5' just warps mouse back to keyboard location, to give keyboard focus back from mouse
   - on {slash,0,.,+,-}, keyboard cursor moves to mouse position, and edit affects tile where mouse was
 - ctrl-numpad moves viewport



are hashtags per zone or global? (should be global?) do testing






deal with TODOs in code



watching dwarf play VS: would want multiple screenshots per room (e.g. B029 floor, then B029 mural), but mark one as canonical (as opposed to AnimalWell-compositing)
 - or maybe in AW I will also want 'auxilary screenshots' as well as compositing?


maybe turn off meta area (and NUMPAD_STAR cycles) when unused?



dwarf idea about partial screenshot (e.g. alien font, VS mural square) mapping to letters, how to deal with


aside: my tool could use c&p to help solve tail puzzle in VS

animal well pencil, i made way to 'draw' in ztracker, again a 'draw' layer could be good

since i can already pull up full size screenshot, having a way to click bounds a clip a section (e.g. idol out of VS screenshot) could be useful... then e.g. set up
way to make dwarf's translator, where I have a row of screenshot clips, and a row of alphabet, and a way to click one row input and get other row output...
basically, try to list all the scenarios it would be nice to support, and see if there is a cleanish way to unify them all under my 
screenshot-grid-with-associated-other-data whole theme i have going on...
scenario: even for non-screen-based games (e.g. hero's spirit), taking screenshots of like NPC dialogs and having a 'zone' for each area and just placing screenshots haphazard is useful

------------------------------------------


and I'm already forgetting keys, need cheatsheet
    2468   move
    0      screenshot
    +-     paste cut
    *      change projection (full screen, map area, metadata area)
    /      edit note
    79     change zoom
    .      toggle #TODO note (e.g. take better notes after this recording session)
    13     unused
mousing: hover shows cell, click to move cursor to that cell
also mousing for infrequent stuff (e.g. key search/highlight)



root directory for games (debug v release, change games, catalogue? app data folders?)


Leaf's odysssey also has
 - left HUD
 - screen names like elephantasy
so I probably want to 
 - capture whole screenshot
 - have a projection mechanism to toggle whole versus just map area
 - have a way to capture metadata from a projection and display it too (e.g. grid of screen names, or screen name in summary area)
and I'll be playing/capturing 2x or 3x resolution, so want to downscale screenshots/images like Elephantasy to save disk/processing/etc



time travel/review
